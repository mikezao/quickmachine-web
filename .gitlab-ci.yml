stages:
  - deploy_infra
  - deploy_code

deploy_infrastructure:
  stage: deploy_infra
  image: mcr.microsoft.com/azterraform:latest
  before_script:
    - export ARM_CLIENT_ID=$AZURE_CLIENT_ID
    - export ARM_CLIENT_SECRET=$AZURE_CLIENT_SECRET
    - export ARM_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID
    - export ARM_TENANT_ID=$AZURE_TENANT_ID
    - export TF_VAR_app_name=$APP_NAME
    - export TF_VAR_gitlab_project_id=$GITLAB_PROJECT_ID
    - export TF_VAR_gitlab_trigger_token=$GITLAB_TRIGGER_TOKEN
    - cd terraform
    - terraform init -reconfigure
  script:
    - terraform apply -auto-approve
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
    - if: $CI_PIPELINE_SOURCE == "web"
  tags:
    - terraforms

deploy_function_code:
  stage: deploy_code
  # Use the official Node.js image, which has 'npm' and 'apt-get'
  image: node:18
  before_script:
    - echo "Installing dependencies and Azure CLI from Microsoft's repository..."
    
    # 1. Update package lists and install prerequisite packages
    - apt-get update -y
    - apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg

    # 2. Download and install the Microsoft signing key
    - mkdir -p /etc/apt/keyrings
    - curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null
    - chmod go+r /etc/apt/keyrings/microsoft.gpg

    # 3. Add the Azure CLI software repository
    - echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/azure-cli.list

    # 4. Update package lists again and install Azure CLI and zip
    - apt-get update -y
    - apt-get install -y azure-cli zip
    
    # 5. Login to Azure using the Service Principal
    - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
  script:
    - echo "Changing to backend directory..."
    - cd backend
    - echo "Installing Node.js dependencies..."
    # 5. Install production dependencies for your function
    - npm install --production
    - echo "Zipping function code with dependencies..."
    # 6. Zip the contents, including the new node_modules folder
    - zip -r ../backend.zip .
    - cd ..
    - echo "Deploying zipped code to Function App..."
    # 7. Deploy the complete package
    - az functionapp deployment source config-zip -g "${APP_NAME}-rg" -n "${APP_NAME}-backend-func" --src backend.zip
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
    - if: $CI_PIPELINE_SOURCE == "web"
  tags:
    - terraforms